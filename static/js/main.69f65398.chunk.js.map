{"version":3,"sources":["services/fetchApis.js","actions/index.js","actions/actionTypes.js","pages/Login.jsx","pages/Settings.jsx","components/Timer.jsx","pages/Game.jsx","pages/Feedback.jsx","pages/Ranking.jsx","App.js","serviceWorker.js","reducers/loginReducer.js","reducers/timerReducer.js","reducers/index.js","store/index.js","index.js"],"names":["fetchToken","a","fetch","request","json","data","token","fetchQuestions","results","sendTokenAction","type","Login","props","state","email","name","handleChange","bind","returnForm","target","this","setState","value","getToken","action","className","htmlFor","onChange","data-testid","id","to","onClick","stateKey","player","assertions","score","gravatarEmail","localStorage","setItem","JSON","stringify","disabled","src","alt","Component","connect","dispatch","userInfo","cryptoEmail","md5","toString","picture","getTokenThunk","Settings","Timer","timer","timerReducer","updateTimer","Game","loading","questions","isButtonVisible","shouldDisable","i","fetchQuest","returnGame","handleClick","handleNextQuest","verifyAnswer","resetTimer","response","event","difficulty","Object","values","classList","includes","correctAnswer","parse","getItem","updatedStateKey","easy","medium","hard","buttons","parentNode","children","forEach","button","add","negative","answers","sort","buttonA","buttonB","key","previousState","image","category","question","retunAnswers","returnNextButton","currentQuestion","correct_answer","incorrect_answers","map","answer","index","testId","answerClass","mountPage","loginReducer","Feedback","ranking","wellDone","emoji","getUnicode","couldBeBetter","Ranking","orderedRanking","playerA","playerB","App","setInterval","exact","path","component","React","Boolean","window","location","hostname","match","INITIAL_STATE","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69f65398.chunk.js","sourcesContent":["export async function fetchToken() {\n  const request = await fetch('https://opentdb.com/api_token.php?command=request');\n  const data = await request.json();\n  return data.token;\n}\n\nexport async function fetchQuestions(token) {\n  const request = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n  const data = await request.json();\n  return data.results;\n}\n","import md5 from 'crypto-js/md5';\nimport { LOG_USER, SEND_TOKEN, UPDATE_TIMER, RESET_TIMER } from './actionTypes';\nimport { fetchToken } from '../services/fetchApis';\n\nconst logUserAction = (userInfo) => ({\n  type: LOG_USER,\n  userInfo,\n});\n\nconst sendTokenAction = (token) => ({\n  type: SEND_TOKEN,\n  token,\n});\n\nexport const updateTimerAction = () => ({\n  type: UPDATE_TIMER,\n});\n\nexport const resetTimerAction = () => ({\n  type: RESET_TIMER,\n});\n\nexport default function getTokenThunk({ name, email }) {\n  return async (dispatch) => {\n    const token = await fetchToken();\n    const cryptoEmail = md5(email).toString();\n    const picture = `https://www.gravatar.com/avatar/${cryptoEmail}`;\n\n    dispatch(sendTokenAction(token));\n    dispatch(logUserAction({ name, email, picture }));\n\n    localStorage.setItem('token', token);\n  };\n}\n","export const LOG_USER = 'LOG_USER';\n\nexport const SEND_TOKEN = 'SEND_TOKEN';\n\nexport const SEND_QUESTIONS = 'SEND_QUESTIONS';\n\nexport const UPDATE_TIMER = 'UPDATE_TIMER';\n\nexport const RESET_TIMER = 'RESET_TIMER';\n","import React, { Component } from 'react';\n\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport getTokenThunk from '../actions';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: '',\n      name: '',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.returnForm = this.returnForm.bind(this);\n  }\n\n  handleChange({ target }) {\n    this.setState({\n      [target.name]: target.value,\n    });\n  }\n\n  returnForm(name, email, getToken) {\n    return (\n      <form action=\"\" className=\"login-form\">\n        <label htmlFor=\"input-player-name\">\n          Nome:\n          <input\n            onChange={ this.handleChange }\n            data-testid=\"input-player-name\"\n            type=\"text\"\n            name=\"name\"\n            value={ name }\n            id=\"input-player-name\"\n          />\n        </label>\n        <label htmlFor=\"input-gravatar-email\">\n          Email:\n          <input\n            onChange={ this.handleChange }\n            data-testid=\"input-gravatar-email\"\n            type=\"email\"\n            name=\"email\"\n            value={ email }\n            id=\"input-gravatar-email\"\n          />\n        </label>\n        <Link to=\"/game\">\n          <button\n            onClick={ () => {\n              const stateKey = {\n                player: {\n                  name,\n                  assertions: 0,\n                  score: 0,\n                  gravatarEmail: email,\n                },\n              };\n              localStorage.setItem('state', JSON.stringify(stateKey));\n              getToken({ name, email });\n            } }\n            data-testid=\"btn-play\"\n            type=\"button\"\n            disabled={ !name || !email }\n            id=\"play-button\"\n          >\n            Jogar\n          </button>\n        </Link>\n      </form>\n    );\n  }\n\n  render() {\n    const { name, email } = this.state;\n    const { getToken } = this.props;\n\n    return (\n      <div id=\"login-page\">\n        <div className=\"title\">\n          <h1>Trivia</h1>\n          <Link to=\"/settings\">\n            <img\n              src=\"https://i.ibb.co/kQHXQZt/Pngtree-settings-icon-mechanical-gear-cartoon-4000937.png\"\n              alt=\"\"\n            />\n          </Link>\n        </div>\n        {this.returnForm(name, email, getToken)}\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getToken: (userInfo) => dispatch(getTokenThunk(userInfo)),\n});\n\nLogin.propTypes = {\n  getToken: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\n\nclass Settings extends Component {\n  render() {\n    return (\n      <div>\n        <h1 data-testid=\"settings-title\">Configurações</h1>\n      </div>\n    );\n  }\n}\n\nexport default Settings;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { updateTimerAction } from '../actions/index';\n\nclass Timer extends Component {\n  render() {\n    const { timer } = this.props;\n\n    return (\n      <div className=\"timer\">{ timer > 0 ? timer : 'Acabou o tempo!' }</div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  timer: state.timerReducer.timer,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateTimer: () => dispatch(updateTimerAction()),\n});\n\nTimer.propTypes = {\n  timer: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { fetchQuestions } from '../services/fetchApis';\nimport Timer from '../components/Timer';\nimport { resetTimerAction } from '../actions';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      questions: [],\n      isButtonVisible: false,\n      shouldDisable: false,\n      i: 0,\n    };\n\n    this.fetchQuest = this.fetchQuest.bind(this);\n    this.returnGame = this.returnGame.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleNextQuest = this.handleNextQuest.bind(this);\n    this.verifyAnswer = this.verifyAnswer.bind(this);\n  }\n\n  componentDidMount() {\n    const { resetTimer } = this.props;\n\n    this.fetchQuest();\n    resetTimer();\n  }\n\n  async fetchQuest() {\n    const { token } = this.props;\n    const response = await fetchQuestions(token);\n    this.setState({\n      questions: response,\n      loading: false,\n    });\n  }\n\n  correctAnswer() {\n    return 'correct-answer';\n  }\n\n  verifyAnswer(event, difficulty) {\n    const { timer } = this.props;\n    const difficultyValues = {\n      easy: 1,\n      medium: 2,\n      hard: 3,\n    };\n    const baseScore = 10;\n\n    if (Object.values(event.target.classList).includes(this.correctAnswer())) {\n      const stateKey = JSON.parse(localStorage.getItem('state'));\n      const updatedStateKey = {\n        player: {\n          ...stateKey.player,\n          assertions: stateKey.player.assertions + 1,\n          score:\n            stateKey.player.score\n            + (baseScore + timer * difficultyValues[difficulty]),\n        },\n      };\n\n      localStorage.setItem('state', JSON.stringify(updatedStateKey));\n    }\n  }\n\n  handleClick(event) {\n    const { questions, i } = this.state;\n    const buttons = event.target.parentNode.children;\n    Object.values(buttons).forEach((button) => {\n      if (\n        button.className === this.correctAnswer()\n        || button.className === 'wrong-answer'\n      ) {\n        button.classList.add(`${button.className}-style`);\n      }\n    });\n\n    this.setState({\n      isButtonVisible: true,\n      shouldDisable: true,\n    });\n\n    this.verifyAnswer(event, questions[i].difficulty);\n  }\n\n  retunAnswers(negative, answers) {\n    return (\n      <div className=\"answers\">\n        {answers.sort((buttonA, buttonB) => {\n          if (buttonA.key > buttonB.key) return 1;\n          if (buttonA.key < buttonB.key) return negative;\n          return 0;\n        })}\n      </div>\n    );\n  }\n\n  handleNextQuest() {\n    const { resetTimer } = this.props;\n\n    this.setState((previousState) => ({\n      i: previousState.i + 1,\n      isButtonVisible: false,\n      shouldDisable: false,\n    }));\n\n    resetTimer();\n  }\n\n  returnNextButton() {\n    return (\n      <button\n        data-testid=\"btn-next\"\n        type=\"button\"\n        onClick={ this.handleNextQuest }\n        id=\"next-button\"\n      >\n        Próxima\n      </button>\n    );\n  }\n\n  mountPage({\n    image,\n    player,\n    isButtonVisible,\n    questions,\n    i,\n    negative,\n    answers,\n    timer,\n  }) {\n    return (\n      <div id=\"game-page\">\n        <header>\n          <div className=\"title\">\n            <div className=\"avatar\">\n              <img\n                data-testid=\"header-profile-picture\"\n                src={ image }\n                alt=\"player avatar\"\n              />\n              <p data-testid=\"header-player-name\">{player.name}</p>\n            </div>\n            <div>\n              <Link to=\"/feedback\">Feedback</Link>\n            </div>\n          </div>\n        </header>\n        <main className=\"main\">\n          <section className=\"status\">\n            <h3 data-testid=\"header-score\">{`Pontuação: ${player.score}`}</h3>\n            <div className=\"timer\">\n              {!isButtonVisible ? <Timer /> : 'Confira a resposta!'}\n            </div>\n          </section>\n          <div>\n            <h2 data-testid=\"question-category\">{questions[i].category}</h2>\n            <h3 data-testid=\"question-text\">{questions[i].question}</h3>\n          </div>\n          {this.retunAnswers(negative, answers)}\n        </main>\n        <div className=\"button-container\">\n          {timer <= 0 || isButtonVisible === true\n            ? this.returnNextButton()\n            : null}\n        </div>\n      </div>\n    );\n  }\n\n  returnGame() {\n    const { questions, i, isButtonVisible, shouldDisable } = this.state;\n    const limitIndex = 5;\n\n    if (i === limitIndex) return <Redirect to=\"/feedback\" />;\n\n    const { image, timer } = this.props;\n    const negative = -1;\n    const { player } = JSON.parse(localStorage.getItem('state'));\n    const currentQuestion = questions[i];\n    const allQuestions = [\n      currentQuestion.correct_answer,\n      ...currentQuestion.incorrect_answers,\n    ];\n    const answers = allQuestions.map((answer, index) => {\n      const testId = index === 0 ? this.correctAnswer() : `wrong-answer-${index - 1}`;\n      const answerClass = index === 0 ? this.correctAnswer() : 'wrong-answer';\n\n      return (\n        <button\n          onClick={ this.handleClick }\n          className={ answerClass }\n          key={ answer }\n          type=\"button\"\n          data-testid={ testId }\n          disabled={ shouldDisable || timer <= 0 }\n        >\n          {answer}\n        </button>\n      );\n    });\n\n    return this.mountPage({\n      image,\n      player,\n      isButtonVisible,\n      questions,\n      i,\n      negative,\n      answers,\n      timer,\n    });\n  }\n\n  render() {\n    const { loading } = this.state;\n    return loading === true ? <span>loading...</span> : this.returnGame();\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  image: state.loginReducer.picture,\n  questions: state.loginReducer.questions,\n  token: state.loginReducer.token,\n  timer: state.timerReducer.timer,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  resetTimer: () => dispatch(resetTimerAction()),\n});\n\nGame.propTypes = {\n  image: PropTypes.string,\n  token: PropTypes.string,\n  timer: PropTypes.number,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport emoji from 'emoji-dictionary';\n\nclass Feedback extends Component {\n  componentDidMount() {\n    const { name, picture } = this.props;\n    const { score } = JSON.parse(localStorage.getItem('state')).player;\n\n    if (!localStorage.getItem('ranking')) localStorage.setItem('ranking', '[]');\n\n    const ranking = [\n      ...JSON.parse(localStorage.getItem('ranking')),\n      { name, score, picture },\n    ];\n\n    localStorage.setItem('ranking', JSON.stringify(ranking));\n  }\n\n  render() {\n    const { email } = this.props;\n    const cryptoEmail = md5(email).toString();\n    const { player } = JSON.parse(localStorage.getItem('state'));\n    const minimumAssertions = 3;\n    const wellDone = <p>{`Mandou bem! ${emoji.getUnicode('smile')}`}</p>;\n    const couldBeBetter = <p>{`Podia ser melhor... ${emoji.getUnicode('grimacing')}`}</p>;\n    return (\n      <div id=\"feedback-page\">\n        <header>\n          <img data-testid=\"header-profile-picture\" src={ `https://www.gravatar.com/avatar/${cryptoEmail}` } alt=\"profile\" />\n          <h1 data-testid=\"header-player-name\">{ player.name }</h1>\n          {/* <p data-testid=\"header-score\">{ player.score }</p> */}\n        </header>\n        <main>\n          <section>\n            <p>\n              Pontuação:&nbsp;\n              <span data-testid=\"feedback-total-score\">\n                { player.score }\n              </span>\n            </p>\n            <p>\n              Acertos:&nbsp;\n              <span data-testid=\"feedback-total-question\">\n                { player.assertions }\n              </span>\n            </p>\n          </section>\n          <section>\n            <p data-testid=\"feedback-text\">\n              {\n                player.assertions >= minimumAssertions\n                  ? wellDone\n                  : couldBeBetter\n              }\n            </p>\n          </section>\n          <section>\n            <Link to=\"/\">\n              <button data-testid=\"btn-play-again\" type=\"button\">Jogar novamente</button>\n            </Link>\n            <Link to=\"/ranking\">\n              <button data-testid=\"btn-ranking\" type=\"button\">Ver ranking</button>\n            </Link>\n          </section>\n        </main>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.loginReducer.email,\n  name: state.loginReducer.name,\n  picture: state.loginReducer.picture,\n});\n\nFeedback.propTypes = {\n  email: PropTypes.string,\n}.isRequired;\n\nexport default connect(mapStateToProps)(Feedback);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Ranking extends Component {\n  render() {\n    const orderedRanking = JSON.parse(localStorage.getItem('ranking'))\n      .sort((playerA, playerB) => playerB.score - playerA.score)\n      // Caso seja necessário tirar as replicações de jogadores com o mesmo nome\n      // .reduce((acc, currentPlayer) => {\n      //   if (!acc.find((player) => player.name === currentPlayer.name)) {\n      //     return [...acc, currentPlayer];\n      //   }\n\n      //   return acc;\n      // }, [])\n      .map((player, index) => (\n        <li key={ index } className=\"player\">\n          <p>{`${index + 1}°`}</p>\n          <img src={ player.picture } alt=\"Gravatar\" />\n          <ul>\n            <li data-testid={ `player-name-${index}` }>\n              <strong>Jogador: </strong>\n              {player.name}\n            </li>\n            <li data-testid={ `player-score-${index}` }>\n              <strong>Pontuação: </strong>\n              {player.score}\n            </li>\n          </ul>\n        </li>\n      ));\n\n    return (\n      <div id=\"ranking-page\">\n        <div className=\"title\">\n          <h1 data-testid=\"ranking-title\">Ranking</h1>\n          <Link to=\"/\">\n            <button type=\"button\" data-testid=\"btn-go-home\">Home</button>\n          </Link>\n        </div>\n        <ol>\n          { orderedRanking }\n        </ol>\n      </div>\n    );\n  }\n}\n\nexport default Ranking;\n","import React from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Login from './pages/Login';\nimport Settings from './pages/Settings';\nimport Game from './pages/Game';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\nimport { updateTimerAction } from './actions';\n\nclass App extends React.Component {\n  componentDidMount() {\n    const { updateTimer } = this.props;\n    const timeInterval = 1000;\n\n    setInterval(() => {\n      updateTimer();\n    }, timeInterval);\n  }\n\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route path=\"/settings\" component={ Settings } />\n        <Route path=\"/game\" component={ Game } />\n        <Route path=\"/feedback\" component={ Feedback } />\n        <Route path=\"/ranking\" component={ Ranking } />\n      </Switch>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateTimer: () => dispatch(updateTimerAction()),\n});\n\nApp.propTypes = {\n  updateTimer: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { LOG_USER, SEND_TOKEN } from '../actions/actionTypes';\n\nconst INITIAL_STATE = {\n  name: '',\n  email: '',\n  token: '',\n};\n\nconst loginReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case LOG_USER:\n    return {\n      ...state,\n      name: action.userInfo.name,\n      email: action.userInfo.email,\n      picture: action.userInfo.picture,\n    };\n  case SEND_TOKEN:\n    return {\n      ...state,\n      token: action.token,\n    };\n  case 'SEND_QUESTIONS':\n    return {\n      ...state,\n      questions: action.questions,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default loginReducer;\n","import { RESET_TIMER, UPDATE_TIMER } from '../actions/actionTypes';\n\nconst INITIAL_STATE = {\n  timer: 30,\n};\n\nconst timerReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case UPDATE_TIMER:\n    return {\n      timer: state.timer - 1,\n    };\n\n  case RESET_TIMER:\n    return {\n      timer: 30,\n    };\n\n  default:\n    return state;\n  }\n};\n\nexport default timerReducer;\n","import { combineReducers } from 'redux';\nimport loginReducer from './loginReducer';\nimport timerReducer from './timerReducer';\n\nconst rootReducer = combineReducers({\n  loginReducer,\n  timerReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { HashRouter as BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>, document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}